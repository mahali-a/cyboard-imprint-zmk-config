#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    chosen { zmk,matrix-transform = &imprint_function_row; };

    behaviors {
        CAPSWord_v1: CAPSWord_v1 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&caps_word>;
        };

        HRM_left_index_v1: HRM_left_index_v1 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            bindings = <&kp>, <&kp>;

            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <57 56 55 72 73 74 5 6 7 8 16 17 18 19 20 28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 9 21 33 45 63 79 52 53 54 70 71 69>;
            hold-trigger-on-release;
        };

        HRM_left_middy_v1: HRM_left_middy_v1 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <210>;
            bindings = <&kp>, <&kp>;

            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <57 56 55 72 73 74 5 6 7 8 16 17 18 19 20 28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 9 21 33 45 63 79 52 53 54 69 70 71>;
            hold-trigger-on-release;
        };

        HRM_left_pinky_v1: HRM_left_pinky_v1 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            bindings = <&kp>, <&kp>;

            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <57 56 55 72 73 74 5 6 7 8 9 16 17 18 19 20 21 29 30 31 32 33 42 43 44 45 60 61 62 63 28 40 41 58 59 75 76 77 79 78 52 53 54 69 70 71>;
            hold-trigger-on-release;
        };

        HRM_left_ring_v1: HRM_left_ring_v1 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <240>;
            bindings = <&kp>, <&kp>;

            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <57 56 55 72 73 74 5 6 7 8 16 17 18 19 20 28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 9 21 33 45 63 79 52 53 54 69 70 71>;
            hold-trigger-on-release;
        };

        HRM_right_index_v1: HRM_right_index_v1 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            bindings = <&kp>, <&kp>;

            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <52 53 54 71 70 69 0 1 10 11 12 13 14 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 64 65 66 67 68 15 4 2 3 55 56 57 72 73 74>;
            hold-trigger-on-release;
        };

        HRM_right_middy_v1: HRM_right_middy_v1 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <210>;
            bindings = <&kp>, <&kp>;

            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <52 53 54 71 70 69 0 1 10 11 12 13 14 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 64 65 66 67 68 15 4 2 3 55 56 57 72 73 74>;
            hold-trigger-on-release;
        };

        HRM_right_pinky_v1: HRM_right_pinky_v1 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            bindings = <&kp>, <&kp>;

            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <52 53 54 71 70 69 0 1 10 11 12 13 14 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 64 65 66 67 68 15 4 2 3 55 56 57 72 73 74>;
            hold-trigger-on-release;
        };

        HRM_right_ring_v1: HRM_right_ring_v1 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <240>;
            bindings = <&kp>, <&kp>;

            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <52 53 54 71 70 69 0 1 10 11 12 13 14 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 64 65 66 67 68 15 4 2 3 55 56 57 72 73 74>;
            hold-trigger-on-release;
        };

        space_v1: space_v1 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&mo>, <&kp>;

            flavor = "balanced";
            quick-tap-ms = <150>;
            retro-tap;
        };

        thumb_v1: thumb_v1 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&mo>, <&kp>;

            flavor = "balanced";
            quick-tap-ms = <300>;
        };
    };

    combos {
        compatible = "zmk,combos";

        capsword {
            bindings = <&CAPSWord_v1 LSHIFT 0>;
            key-positions = <64 69>;
        };
    };

    macros {
        cur_COPY_v1: cur_COPY_v1 {
            label = "&CUR_COPY_V1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(C)>;
        };

        cur_CUT_v1: cur_CUT_v1 {
            label = "&CUR_CUT_V1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(X)>;
        };

        cur_PASTE_v1: cur_PASTE_v1 {
            label = "&CUR_PASTE_V1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(V)>;
        };

        cur_UNDO_v1: cur_UNDO_v1 {
            label = "&CUR_UNDO_V1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(Z)>;
        };

        cur_REDO_v1: cur_REDO_v1 {
            label = "&CUR_REDO_V1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(Y)>;
        };

        cur_SELECT_ALL_v1: cur_SELECT_ALL_v1 {
            label = "&CUR_SELECT_ALL_V1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(A)>;
        };

        cur_SELECT_WORD_v1: cur_SELECT_WORD_v1 {
            label = "&CUR_SELECT_WORD_V1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp LC(LEFT) &kp LC(LS(RIGHT))>;
        };

        cur_SELECT_LINE_v1: cur_SELECT_LINE_v1 {
            label = "&CUR_SELECT_LINE_V1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp HOME &kp LS(END)>;
        };

        cur_EXTEND_WORD_v1: cur_EXTEND_WORD_v1 {
            label = "&CUR_EXTEND_WORD_V1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp LC(LS(RIGHT))>;
        };

        cur_EXTEND_LINE_v1: cur_EXTEND_LINE_v1 {
            label = "&CUR_EXTEND_LINE_V1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp LS(END)>;
        };

        cur_FIND_v1: cur_FIND_v1 {
            label = "&CUR_FIND_V1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(F)>;
        };

        cur_FNEXT_v1: cur_FNEXT_v1 {
            label = "&CUR_FNEXT_V1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(G)>;
        };

        cur_FPREV_v1: cur_FPREV_v1 {
            label = "&CUR_FPREV_V1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(G))>;
        };

        battery_check: battery_check {
            label = "BATTERY_CHECK";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&rgb_ug RGB_COLOR_HSB(120,100,50)>,
                <&macro_pause_for_release>,
                <&rgb_ug RGB_TOG>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alpha_layer {
            bindings = <
&trans      &trans                     &trans                    &trans                      &trans                       &trans                              &trans         &trans                             &trans                       &trans                     &trans                         &trans
&kp GRAVE   &kp N1                     &kp N2                    &kp N3                      &kp N4                       &kp N5                              &kp N6         &kp N7                             &kp N8                       &kp N9                     &kp N0                         &kp MINUS
&kp TAB     &kp Q                      &kp W                     &kp E                       &kp R                        &kp T                               &kp Y          &kp U                              &kp I                        &kp O                      &kp P                          &kp BSLH
&kp ESCAPE  &HRM_left_pinky_v1 LGUI A  &HRM_left_ring_v1 LALT S  &HRM_left_middy_v1 LCTRL D  &HRM_left_index_v1 LSHIFT F  &kp G                               &kp H          &HRM_right_index_v1 RIGHT_SHIFT J  &HRM_right_middy_v1 RCTRL K  &HRM_right_ring_v1 RALT L  &HRM_right_pinky_v1 RGUI SEMI  &kp SQT
&kp LSHFT   &kp Z                      &kp X                     &kp C                       &kp V                        &kp B                               &kp N          &kp M                              &kp COMMA                    &kp DOT                    &kp FSLH                       &kp RSHFT
                                       &kp LEFT                  &kp RIGHT                                                                                                                                      &kp DOWN                     &kp UP
                                                                                             &kp LEFT_SHIFT               &kp LCTRL           &kp LEFT_ALT    &kp RIGHT_ALT  &kp RIGHT_CONTROL                  &kp RIGHT_SHIFT
                                                                                             &thumb_v1 1 BACKSPACE        &thumb_v1 2 DELETE  &mo 3           &mo 3          &thumb_v1 5 ENTER                  &space_v1 1 SPACE
            >;
        };

        symbol_layer {
            bindings = <
&trans     &trans            &trans          &trans           &trans             &trans                       &trans         &trans               &trans               &trans              &trans  &trans
&kp GRAVE  &kp AMPERSAND     &kp LPAR        &kp RPAR         &kp PLUS           &kp PERIOD                   &cur_CUT_v1    &kp BSPC             &cur_UNDO_v1         &cur_REDO_v1        &trans  &trans
&kp EXCL   &kp LEFT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp QUESTION                 &cur_COPY_v1   &cur_SELECT_WORD_v1  &cur_SELECT_LINE_v1  &cur_SELECT_ALL_v1  &trans  &trans
&kp HASH   &kp CARET         &kp EQUAL       &kp UNDER        &kp DLLR           &kp ASTERISK                 &kp LEFT       &kp DOWN             &kp UP               &kp RIGHT           &trans  &trans
&kp TILDE  &kp LT            &kp PIPE        &kp MINUS        &kp GT             &kp FSLH                     &cur_PASTE_v1  &cur_EXTEND_WORD_v1  &cur_EXTEND_LINE_v1  &cur_FIND_v1        &trans  &trans
                             &trans          &trans                                                                                               &trans               &trans
                                                              &kp NON_US_BSLH    &kp DOT       &trans         &trans         &trans               &trans
                                                              &kp PRCNT          &kp COLON     &kp AT_SIGN    &cur_FNEXT_v1  &cur_FPREV_v1        &trans
            >;
        };

        num_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans   &trans  &trans   &trans
&trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5            &kp F6  &kp F7  &kp F8   &kp F9  &kp F10  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &kp N7  &kp N8   &kp N9  &trans   &kp F12
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &kp N4  &kp N5   &kp N6  &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &kp N1  &kp N2   &kp N3  &trans   &trans
                &trans  &trans                                            &trans   &trans
                                &trans  &trans  &trans    &trans  &trans  &trans
                                &trans  &trans  &trans    &trans  &kp N0  &kp DOT
            >;
        };

        system_layer {
            bindings = <
&trans           &trans           &trans           &trans           &trans        &trans                        &trans           &trans           &trans           &trans           &trans           &trans
&bt BT_CLR       &to 0            &to 1            &to 2            &to 3         &to 4                         &to 5            &to 6            &battery_check   &trans           &trans           &trans
&trans           &trans           &trans           &trans           &trans        &trans                        &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &rgb_ug RGB_HUI  &rgb_ug RGB_HUD  &rgb_ug RGB_SPI  &rgb_ug RGB_SPD
&rgb_ug RGB_SAI  &rgb_ug RGB_SAD  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &trans        &trans                        &trans           &trans           &trans           &trans           &trans           &trans
&bootloader      &trans           &trans           &trans           &trans        &sys_reset                    &sys_reset       &trans           &trans           &trans           &trans           &bootloader
                                  &trans           &trans                                                                                         &trans           &trans
                                                                    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &trans           &trans           &sys_reset
                                                                    &bt BT_SEL 3  &bt BT_SEL 4  &out OUT_USB    &trans           &trans           &trans
            >;
        };

        mouse_layer {
            bindings = <
&trans  &trans  &trans     &trans     &trans     &trans            &trans    &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans            &trans    &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans            &trans    &trans     &trans     &trans     &trans  &trans
&trans  &trans  &mkp RCLK  &mkp MCLK  &mkp LCLK  &trans            &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans            &trans    &trans     &trans     &trans     &trans  &trans
                &trans     &trans                                                       &trans     &trans
                                      &trans     &trans  &trans    &trans    &mkp LCLK  &mkp RCLK
                                      &trans     &trans  &trans    &trans    &trans     &trans
            >;
        };

        media_layer {
            bindings = <
&kp C_SLEEP  &trans  &trans          &trans             &trans             &trans            &trans  &trans  &trans  &trans  &trans  &trans
&kp K_LOCK   &trans  &trans          &trans             &trans             &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans       &trans  &kp K_MUTE      &kp C_VOLUME_DOWN  &kp C_VOLUME_DOWN  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans       &trans  &kp C_PREVIOUS  &kp C_PLAY_PAUSE   &kp C_NEXT         &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans       &trans  &trans          &trans             &trans             &trans            &trans  &trans  &trans  &trans  &trans  &trans
                     &trans          &trans                                                                  &trans  &trans
                                                        &trans             &trans  &trans    &trans  &trans  &trans
                                                        &trans             &trans  &trans    &trans  &trans  &trans
            >;
        };

        typing_layer {
            bindings = <
&trans     &trans  &trans    &trans     &trans     &trans              &trans  &trans    &trans     &trans   &trans    &trans
&kp GRAVE  &kp N1  &kp N2    &kp N3     &kp N4     &kp N5              &kp N6  &kp N7    &kp N8     &kp N9   &kp N0    &kp MINUS
&kp TAB    &kp Q   &kp W     &kp E      &kp R      &kp T               &kp Y   &kp U     &kp I      &kp O    &kp P     &kp BSLH
&kp ESC    &kp A   &kp S     &kp D      &kp F      &kp G               &kp H   &kp J     &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z   &kp X     &kp C      &kp V      &kp B               &kp N   &kp M     &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                   &kp LEFT  &kp RIGHT                                                   &kp DOWN   &kp UP
                                        &kp LCTRL  &kp LALT  &trans    &trans  &kp RALT  &kp RCTRL
                                        &kp BSPC   &kp DEL   &trans    &trans  &kp RET   &kp SPACE
            >;
        };
    };
};

&trackball_central_listener {
    input-processors =
        <&zip_xy_scaler 1 16>,
        <&zip_xy_to_scroll_mapper>,
        <&zip_scroll_transform INPUT_TRANSFORM_Y_INVERT>;
};

&trackball_peripheral_listener { input-processors = <&zip_temp_layer 4 500>; };
